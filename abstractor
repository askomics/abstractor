#! /usr/bin/python3

import argparse
from libabstractor.SparqlQuery import SparqlQuery
from libabstractor.QueryLibrary import QueryLibrary
from libabstractor.RdfGraph import RdfGraph


class Abstractor(object):
    """Abstractor main class"""

    def __init__(self):
        """Init

        Parse args and get prefixes
        """
        parser = argparse.ArgumentParser(description="Generate AskOmics abstraction from a SPARQL endpoint")

        parser.add_argument("-e", "--endpoint", type=str, help="SPARQL enpoint url", required=True)
        parser.add_argument("-n", "--name", type=str, help="Endpoint prefix short name", default="external")
        parser.add_argument("-p", "--endpoint-prefix", type=str, help="Endpoint prefix url", required=True)
        parser.add_argument("--askomics-prefix", type=str, help="AskOmics prefix", default="http://www.semanticweb.org/user/ontologies/2018/1#")
        parser.add_argument("-o", "--output", type=str, help="Output file", default="abstraction.ttl")
        parser.add_argument("-f", "--output-format", type=str, help="RDF format", default="turtle")

        self.args = parser.parse_args()

    def main(self):
        """main"""
        sparql = SparqlQuery(self.args.endpoint, self.args.askomics_prefix)

        library = QueryLibrary()

        rdf = RdfGraph(self.args.askomics_prefix, self.args.endpoint_prefix, self.args.name)

        rdf.add_entities_and_relations(sparql.process_query(library.entities_and_relations))
        rdf.add_decimal_attributes(sparql.process_query(library.entities_and_numeric_attributes))
        rdf.add_text_attributes(sparql.process_query(library.entities_and_text_attributes))

        rdf.graph.serialize(destination=self.args.output, format=self.args.output_format, encoding="utf-8" if self.args.output_format == "turtle" else None)


if __name__ == '__main__':
    """main"""
    Abstractor().main()
